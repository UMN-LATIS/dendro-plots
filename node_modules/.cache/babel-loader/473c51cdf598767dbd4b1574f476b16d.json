{"remainingRequest":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\src\\modules\\traces.js","dependencies":[{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\src\\modules\\traces.js","mtime":1631132713656},{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/JThorneUMN/Documents/GitHub/dendro-plots/src/modules/traces.js"],"names":["store","createSpline","createIndex","createMedian","simpleTrace","obj","colorTrace","propA","propB","x","y","color","opacity","width","shape","mode","trace","Object","name","line","marker","symbol","size","type","splineTrace","prop","freq","splineFORindex","freqName","yearSpan","Math","abs","raw","length","indexObj","cache","index","find","o","id","splineObj","splines","spline","JSON","parse","stringify","applyColorToRaw","indexTrace","formatTraces","locVal","arr","Array","storeCopy","states","current","median","medianID","push","activeStates","filter","rawPointsActive","rawSplineFreq","indexPointsFreq","indexSplineFreq","activePlots","map","rawPlotLocation","indexPlotLocation","activeData","activeDataIDs","dataIDsForMedian","sort","data","methods","findDataForMedian","medianRaw","rawSpline","indexSpline","forEach"],"mappings":"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","sourcesContent":["import store from './store.js'\r\nimport createSpline from './spline.js'\r\nimport createIndex from './index.js'\r\nimport createMedian from './median.js'\r\n\r\nfunction simpleTrace(obj, colorTrace, propA, propB) {\r\n  let x = (propB) ? obj[propA][propB].x : obj[propA].x\r\n  let y = (propB) ? obj[propA][propB].y : obj[propA].y\r\n  let color = (colorTrace) ? obj.color : '#797979'\r\n  let opacity = (colorTrace) ? 1 : 0.7\r\n  let width = (obj.shape) ? 2 : 3\r\n  let mode = (obj.shape) ? 'lines+markers' : 'lines'\r\n\r\n  let trace = new Object()\r\n  trace.name = obj.name\r\n  trace.x = x\r\n  trace.y = y\r\n  trace.line = { color: color, width: width }\r\n  trace.opacity = opacity\r\n  trace.mode = mode\r\n  if (obj.shape) {\r\n    trace.marker = { symbol: obj.shape, size: 8 }\r\n  }\r\n  trace.type = 'scatter' // need scatter gl\r\n\r\n  return trace\r\n}\r\n\r\nfunction splineTrace(obj, prop, freq, splineFORindex) {\r\n  let freqName = freq + 'yr'\r\n  if (freq < 1) {\r\n    let yearSpan = Math.abs(obj.raw.x[obj.raw.x.length - 1] - obj.raw.x[0]) + 1\r\n    freqName = (100 * freq) + '%'\r\n    freq = freq * yearSpan\r\n  }\r\n\r\n  let x, y\r\n  if (splineFORindex) {\r\n    let indexObj = store.cache.index.find(o => o.id == obj.id)\r\n    let index = (indexObj) ? indexObj[freq] : null\r\n    if (!index) {\r\n      let splineObj = store.cache.splines.raw.find(o => o.id == obj.id)\r\n      let spline = (splineObj && splineObj[freq]) ? splineObj[freq] : createSpline(obj.raw.x, obj.raw.y, freq, obj.id, prop, 'raw')\r\n      index = createIndex(obj.raw.x, obj.raw.y, spline, freq, obj.id)\r\n    }\r\n    x = index.x\r\n    y = index.y\r\n  } else {\r\n    x = obj.raw.x\r\n    y = obj.raw.y\r\n  }\r\n\r\n  // spline data previously saved\r\n  if (!obj.spline[prop]) {\r\n    let spline = createSpline(x, y, freq, obj.id, prop)\r\n\r\n    // add spline to obj\r\n    obj.spline[prop] = {\r\n      x: spline.x,\r\n      y: spline.y,\r\n    }\r\n  }\r\n\r\n  obj = JSON.parse(JSON.stringify(obj))\r\n  obj.name = obj.name + '_' + freqName +'_spline'\r\n  obj.shape = false\r\n\r\n  let trace = simpleTrace(obj, !obj.applyColorToRaw, 'spline', prop)\r\n\r\n  return trace\r\n}\r\n\r\nfunction indexTrace(obj, prop, freq) {\r\n  let freqName = freq + 'yr'\r\n  if (freq < 1) {\r\n    let yearSpan = Math.abs(obj.raw.x[obj.raw.x.length - 1] - obj.raw.x[0]) + 1\r\n    freqName = (100 * freq) + '%'\r\n    freq = freq * yearSpan\r\n  }\r\n\r\n  if (!obj.index) {\r\n    // check if spline exists in order to compute index\r\n    let splineObj = store.cache.splines.raw.find(o => o.id == obj.id)\r\n    let spline = (splineObj && splineObj[freq]) ? splineObj[freq] : createSpline(obj.raw.x, obj.raw.y, freq, obj.id, prop, 'raw')\r\n    let index = createIndex(obj.raw.x, obj.raw.y, spline, freq, obj.id)\r\n\r\n    // add index to obj\r\n    obj.index = {\r\n      x: index.x,\r\n      y: index.y\r\n    }\r\n  }\r\n\r\n  obj = JSON.parse(JSON.stringify(obj))\r\n  obj.name = obj.name + '_' + freqName +'_index'\r\n\r\n  let trace = simpleTrace(obj, obj.applyColorToRaw, prop)\r\n\r\n  return trace\r\n}\r\n\r\n// param (locVal): plot location value\r\nconst formatTraces = function(locVal) {\r\n  let arr = new Array()\r\n\r\n  // create array with data only intended for specified plot\r\n  let storeCopy = JSON.parse(JSON.stringify(store.states.current))\r\n  // add median to copy\r\n  let median = store.cache.states.find(o => o.id === store.cache.medianID)\r\n  storeCopy.push(JSON.parse(JSON.stringify(median)))\r\n\r\n  // filter out inactive data sets\r\n  let activeStates = storeCopy.filter(o => (o.rawPointsActive || o.rawSplineFreq || o.indexPointsFreq || o.indexSplineFreq))\r\n\r\n  let activePlots = activeStates.map(o => {\r\n    if (o.rawPlotLocation != locVal) {\r\n      delete o.rawPointsActive\r\n      delete o.rawSplineFreq\r\n    }\r\n    if (o.indexPlotLocation != locVal) {\r\n      delete o.indexPointsFreq\r\n      delete o.indexSplineFreq\r\n    }\r\n\r\n    return o\r\n  })\r\n\r\n  // add required raw data, splines, & index to states\r\n  let activeData = activePlots.map(obj => {\r\n    // median\r\n    if (obj.id === store.cache.medianID) {\r\n      // find if median not current\r\n      let activeDataIDs = store.states.current.map(o => {\r\n          if (o.rawPointsActive || o.rawSplineFreq || o.indexPointsFreq || o.indexSplineFreq) {\r\n            return o.id\r\n          }\r\n      })\r\n      if (JSON.stringify(store.cache.dataIDsForMedian.sort()) != JSON.stringify(activeDataIDs.sort())) {\r\n        store.cache.dataIDsForMedian = activeDataIDs\r\n        let data = store.methods.findDataForMedian(activeDataIDs)\r\n        let median = createMedian(data)\r\n        let medianRaw = store.cache.raw.find(o => o.id === store.cache.medianID)\r\n        medianRaw.x = median.x\r\n        medianRaw.y = median.y\r\n      }\r\n    }\r\n\r\n    // add raw data to all in-case spline or index requires computation\r\n    let raw = store.cache.raw.find(o => o.id == obj.id)\r\n    obj.raw = {\r\n      x: raw.x,\r\n      y: raw.y\r\n    }\r\n    if (obj.rawSplineFreq) {\r\n      let rawSpline = store.cache.splines.raw.find(o => o.id == obj.id)\r\n      obj.spline = {\r\n        raw: (rawSpline) ? rawSpline[obj.rawSplineFreq] : null\r\n      }\r\n    }\r\n    if (obj.indexPointsFreq) {\r\n      let index = store.cache.index.find(o => o.id == obj.id)\r\n      obj.index = (index) ? index[obj.indexPointsFreq] : null\r\n    }\r\n    if (obj.indexSplineFreq) {\r\n      let indexSpline = store.cache.splines.index.find(o => o.id == obj.id)\r\n      obj.spline = {\r\n        index: (indexSpline) ? indexSpline[obj.indexSplineFreq] : null\r\n      }\r\n    }\r\n\r\n    return obj\r\n  })\r\n\r\n  // create traces based on needed format\r\n  // order of creation important\r\n  // most recent trace rendered on top of earlier traces\r\n  activeData.forEach(obj => {\r\n    if (obj.rawSplineFreq) {\r\n      arr.push(splineTrace(obj, 'raw', obj.rawSplineFreq))\r\n    }\r\n    if (obj.rawPointsActive) {\r\n      arr.push(simpleTrace(obj, obj.applyColorToRaw, 'raw'))\r\n    }\r\n    if (obj.indexSplineFreq) {\r\n      arr.push(splineTrace(obj, 'index', obj.indexSplineFreq, true))\r\n    }\r\n    if (obj.indexPointsFreq) {\r\n      arr.push(indexTrace(obj, 'index', obj.indexPointsFreq))\r\n    }\r\n  })\r\n\r\n  return arr\r\n}\r\n\r\nexport default formatTraces\r\n"]}]}