{"remainingRequest":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\src\\modules\\traces.js","dependencies":[{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\src\\modules\\traces.js","mtime":1630689789798},{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgc3RvcmUgZnJvbSAnLi9zdG9yZS5qcyc7CmltcG9ydCBjcmVhdGVTcGxpbmUgZnJvbSAnLi9zcGxpbmUuanMnOwppbXBvcnQgY3JlYXRlSW5kZXggZnJvbSAnLi9pbmRleC5qcyc7CgpmdW5jdGlvbiBzaW1wbGVUcmFjZShvYmosIGNvbG9yQm9vbCwgcHJvcEEsIHByb3BCKSB7CiAgdmFyIHggPSBwcm9wQiA/IG9ialtwcm9wQV1bcHJvcEJdLnggOiBvYmpbcHJvcEFdLng7CiAgdmFyIHkgPSBwcm9wQiA/IG9ialtwcm9wQV1bcHJvcEJdLnkgOiBvYmpbcHJvcEFdLnk7CiAgdmFyIGNvbG9yID0gY29sb3JCb29sID8gb2JqLmNvbG9yIDogJyM3OTc5NzknOwogIHZhciBtb2RlID0gb2JqLnNoYXBlID8gJ2xpbmVzK21hcmtlcnMnIDogJ2xpbmVzJzsKICB2YXIgdHJhY2UgPSBuZXcgT2JqZWN0KCk7CiAgdHJhY2UubmFtZSA9IG9iai5uYW1lOwogIHRyYWNlLnggPSB4OwogIHRyYWNlLnkgPSB5OwogIHRyYWNlLmxpbmUgPSB7CiAgICBjb2xvcjogY29sb3IsCiAgICB3aWR0aDogMwogIH07CiAgdHJhY2UubW9kZSA9IG1vZGU7CgogIGlmIChvYmouc2hhcGUpIHsKICAgIHRyYWNlLm1hcmtlciA9IHsKICAgICAgc3ltYm9sOiBvYmouc2hhcGUsCiAgICAgIHNpemU6IDYKICAgIH07CiAgfQoKICB0cmFjZS50eXBlID0gJ3NjYXR0ZXInOyAvLyBuZWVkIHNjYXR0ZXIgZ2wKCiAgcmV0dXJuIHRyYWNlOwp9CgpmdW5jdGlvbiBzcGxpbmVUcmFjZShvYmosIHByb3AsIGZyZXEsIHNwbGluZUZPUmluZGV4KSB7CiAgdmFyIGZyZXFOYW1lID0gMTAwICogZnJlcSArICd5cic7CgogIGlmIChmcmVxIDwgMSkgewogICAgdmFyIHllYXJTcGFuID0gTWF0aC5hYnMob2JqLnJhdy54W29iai5yYXcueC5sZW5ndGggLSAxXSAtIG9iai5yYXcueFswXSkgKyAxOwogICAgZnJlcU5hbWUgPSBmcmVxICsgJyUnOwogICAgZnJlcSA9IGZyZXEgKiB5ZWFyU3BhbjsKICB9CgogIHZhciB4LCB5OwoKICBpZiAoc3BsaW5lRk9SaW5kZXgpIHsKICAgIHZhciBpbmRleE9iaiA9IHN0b3JlLmNhY2hlLmluZGV4LmZpbmQoZnVuY3Rpb24gKG8pIHsKICAgICAgcmV0dXJuIG8uaWQgPT0gb2JqLmlkOwogICAgfSk7CiAgICB2YXIgaW5kZXggPSBpbmRleE9iaiA/IGluZGV4T2JqW2ZyZXFdIDogbnVsbDsKCiAgICBpZiAoIWluZGV4KSB7CiAgICAgIHZhciBzcGxpbmVPYmogPSBzdG9yZS5jYWNoZS5zcGxpbmVzLnJhdy5maW5kKGZ1bmN0aW9uIChvKSB7CiAgICAgICAgcmV0dXJuIG8uaWQgPT0gb2JqLmlkOwogICAgICB9KTsKICAgICAgdmFyIHNwbGluZSA9IHNwbGluZU9iaiAmJiBzcGxpbmVPYmpbZnJlcV0gPyBzcGxpbmVPYmpbZnJlcV0gOiBjcmVhdGVTcGxpbmUob2JqLnJhdy54LCBvYmoucmF3LnksIGZyZXEsIG9iai5pZCwgcHJvcCwgJ3JhdycpOwogICAgICBpbmRleCA9IGNyZWF0ZUluZGV4KG9iai5yYXcueCwgb2JqLnJhdy55LCBzcGxpbmUsIGZyZXEsIG9iai5pZCk7CiAgICB9CgogICAgeCA9IGluZGV4Lng7CiAgICB5ID0gaW5kZXgueTsKICB9IGVsc2UgewogICAgeCA9IG9iai5yYXcueDsKICAgIHkgPSBvYmoucmF3Lnk7CiAgfSAvLyBzcGxpbmUgZGF0YSBwcmV2aW91c2x5IHNhdmVkCgoKICBpZiAoIW9iai5zcGxpbmVbcHJvcF0pIHsKICAgIHZhciBfc3BsaW5lID0gY3JlYXRlU3BsaW5lKHgsIHksIGZyZXEsIG9iai5pZCwgcHJvcCk7IC8vIGFkZCBzcGxpbmUgdG8gb2JqCgoKICAgIG9iai5zcGxpbmVbcHJvcF0gPSB7CiAgICAgIHg6IF9zcGxpbmUueCwKICAgICAgeTogX3NwbGluZS55CiAgICB9OwogIH0KCiAgb2JqID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTsKICBvYmoubmFtZSA9IG9iai5uYW1lICsgJ18nICsgZnJlcU5hbWUgKyAnX3NwbGluZSc7CiAgb2JqLnNoYXBlID0gZmFsc2U7CiAgdmFyIHRyYWNlID0gc2ltcGxlVHJhY2Uob2JqLCAhb2JqLmFwcGx5Q29sb3JUb1JhdywgJ3NwbGluZScsIHByb3ApOwogIHJldHVybiB0cmFjZTsKfQoKZnVuY3Rpb24gaW5kZXhUcmFjZShvYmosIHByb3AsIGZyZXEpIHsKICB2YXIgZnJlcU5hbWUgPSAxMDAgKiBmcmVxICsgJ3lyJzsKCiAgaWYgKGZyZXEgPCAxKSB7CiAgICB2YXIgeWVhclNwYW4gPSBNYXRoLmFicyhvYmoucmF3Lnhbb2JqLnJhdy54Lmxlbmd0aCAtIDFdIC0gb2JqLnJhdy54WzBdKSArIDE7CiAgICBmcmVxTmFtZSA9IGZyZXEgKyAnJSc7CiAgICBmcmVxID0gZnJlcSAqIHllYXJTcGFuOwogIH0KCiAgaWYgKCFvYmouaW5kZXgpIHsKICAgIC8vIGNoZWNrIGlmIHNwbGluZSBleGlzdHMgaW4gb3JkZXIgdG8gY29tcHV0ZSBpbmRleAogICAgdmFyIHNwbGluZU9iaiA9IHN0b3JlLmNhY2hlLnNwbGluZXMucmF3LmZpbmQoZnVuY3Rpb24gKG8pIHsKICAgICAgcmV0dXJuIG8uaWQgPT0gb2JqLmlkOwogICAgfSk7CiAgICB2YXIgc3BsaW5lID0gc3BsaW5lT2JqICYmIHNwbGluZU9ialtmcmVxXSA/IHNwbGluZU9ialtmcmVxXSA6IGNyZWF0ZVNwbGluZShvYmoucmF3LngsIG9iai5yYXcueSwgZnJlcSwgb2JqLmlkLCBwcm9wLCAncmF3Jyk7CiAgICB2YXIgaW5kZXggPSBjcmVhdGVJbmRleChvYmoucmF3LngsIG9iai5yYXcueSwgc3BsaW5lLCBmcmVxLCBvYmouaWQpOyAvLyBhZGQgaW5kZXggdG8gb2JqCgogICAgb2JqLmluZGV4ID0gewogICAgICB4OiBpbmRleC54LAogICAgICB5OiBpbmRleC55CiAgICB9OwogIH0KCiAgb2JqID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTsKICBvYmoubmFtZSA9IG9iai5uYW1lICsgJ18nICsgZnJlcU5hbWUgKyAnX2luZGV4JzsKICB2YXIgdHJhY2UgPSBzaW1wbGVUcmFjZShvYmosIG9iai5hcHBseUNvbG9yVG9SYXcsIHByb3ApOwogIHJldHVybiB0cmFjZTsKfSAvLyBwYXJhbSAobG9jVmFsKTogcGxvdCBsb2NhdGlvbiB2YWx1ZQoKCnZhciBmb3JtYXRUcmFjZXMgPSBmdW5jdGlvbiBmb3JtYXRUcmFjZXMobG9jVmFsKSB7CiAgdmFyIGFyciA9IG5ldyBBcnJheSgpOyAvLyBjcmVhdGUgYXJyYXkgd2l0aCBkYXRhIG9ubHkgaW50ZW5kZWQgZm9yIHNwZWNpZmllZCBwbG90CgogIHZhciBzdG9yZUNvcHkgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0b3JlLnN0YXRlcy5jdXJyZW50KSk7IC8vIGZpbHRlciBvdXQgaW5hY3RpdmUgZGF0YSBzZXRzCgogIHZhciBhY3RpdmVTdGF0ZXMgPSBzdG9yZUNvcHkuZmlsdGVyKGZ1bmN0aW9uIChvKSB7CiAgICByZXR1cm4gby5yYXdQb2ludHNBY3RpdmUgfHwgby5yYXdTcGxpbmVGcmVxIHx8IG8uaW5kZXhQb2ludHNGcmVxIHx8IG8uaW5kZXhTcGxpbmVGcmVxOwogIH0pOwogIHZhciBhY3RpdmVQbG90cyA9IGFjdGl2ZVN0YXRlcy5tYXAoZnVuY3Rpb24gKG8pIHsKICAgIGlmIChvLnJhd1Bsb3RMb2NhdGlvbiAhPSBsb2NWYWwpIHsKICAgICAgZGVsZXRlIG8ucmF3UG9pbnRzQWN0aXZlOwogICAgICBkZWxldGUgby5yYXdTcGxpbmVGcmVxOwogICAgfQoKICAgIGlmIChvLmluZGV4UGxvdExvY2F0aW9uICE9IGxvY1ZhbCkgewogICAgICBkZWxldGUgby5pbmRleFBvaW50c0ZyZXE7CiAgICAgIGRlbGV0ZSBvLmluZGV4U3BsaW5lRnJlcTsKICAgIH0KCiAgICByZXR1cm4gbzsKICB9KTsgLy8gYWRkIHJlcXVpcmVkIHJhdyBkYXRhLCBzcGxpbmVzLCAmIGluZGV4IHRvIHN0YXRlcwoKICB2YXIgYWN0aXZlRGF0YSA9IGFjdGl2ZVBsb3RzLm1hcChmdW5jdGlvbiAob2JqKSB7CiAgICAvLyBhZGQgcmF3IGRhdGEgdG8gYWxsIGluLWNhc2Ugc3BsaW5lIG9yIGluZGV4IHJlcXVpcmVzIGNvbXB1dGF0aW9uCiAgICB2YXIgcmF3ID0gc3RvcmUuY2FjaGUucmF3LmZpbmQoZnVuY3Rpb24gKG8pIHsKICAgICAgcmV0dXJuIG8uaWQgPT0gb2JqLmlkOwogICAgfSk7CiAgICBvYmoucmF3ID0gewogICAgICB4OiByYXcueCwKICAgICAgeTogcmF3LnkKICAgIH07CgogICAgaWYgKG9iai5yYXdTcGxpbmVGcmVxKSB7CiAgICAgIHZhciByYXdTcGxpbmUgPSBzdG9yZS5jYWNoZS5zcGxpbmVzLnJhdy5maW5kKGZ1bmN0aW9uIChvKSB7CiAgICAgICAgcmV0dXJuIG8uaWQgPT0gb2JqLmlkOwogICAgICB9KTsKICAgICAgb2JqLnNwbGluZSA9IHsKICAgICAgICByYXc6IHJhd1NwbGluZSA/IHJhd1NwbGluZVtvYmoucmF3U3BsaW5lRnJlcV0gOiBudWxsCiAgICAgIH07CiAgICB9CgogICAgaWYgKG9iai5pbmRleFBvaW50c0ZyZXEpIHsKICAgICAgdmFyIGluZGV4ID0gc3RvcmUuY2FjaGUuaW5kZXguZmluZChmdW5jdGlvbiAobykgewogICAgICAgIHJldHVybiBvLmlkID09IG9iai5pZDsKICAgICAgfSk7CiAgICAgIG9iai5pbmRleCA9IGluZGV4ID8gaW5kZXhbb2JqLmluZGV4UG9pbnRzRnJlcV0gOiBudWxsOwogICAgfQoKICAgIGlmIChvYmouaW5kZXhTcGxpbmVGcmVxKSB7CiAgICAgIHZhciBpbmRleFNwbGluZSA9IHN0b3JlLmNhY2hlLnNwbGluZXMuaW5kZXguZmluZChmdW5jdGlvbiAobykgewogICAgICAgIHJldHVybiBvLmlkID09IG9iai5pZDsKICAgICAgfSk7CiAgICAgIG9iai5zcGxpbmUgPSB7CiAgICAgICAgaW5kZXg6IGluZGV4U3BsaW5lID8gaW5kZXhTcGxpbmVbb2JqLmluZGV4U3BsaW5lRnJlcV0gOiBudWxsCiAgICAgIH07CiAgICB9CgogICAgcmV0dXJuIG9iajsKICB9KTsgLy8gY3JlYXRlIHRyYWNlcyBiYXNlZCBvbiBuZWVkZWQgZm9ybWF0CiAgLy8gb3JkZXIgb2YgY3JlYXRpb24gaW1wb3J0YW50CiAgLy8gbW9zdCByZWNlbnQgdHJhY2UgcmVuZGVyZWQgb24gdG9wIG9mIGVhcmxpZXIgdHJhY2VzCgogIGFjdGl2ZURhdGEuZm9yRWFjaChmdW5jdGlvbiAob2JqKSB7CiAgICBpZiAob2JqLnJhd1NwbGluZUZyZXEpIHsKICAgICAgYXJyLnB1c2goc3BsaW5lVHJhY2Uob2JqLCAncmF3Jywgb2JqLnJhd1NwbGluZUZyZXEpKTsKICAgIH0KCiAgICBpZiAob2JqLnJhd1BvaW50c0FjdGl2ZSkgewogICAgICBhcnIucHVzaChzaW1wbGVUcmFjZShvYmosIG9iai5hcHBseUNvbG9yVG9SYXcsICdyYXcnKSk7CiAgICB9CgogICAgaWYgKG9iai5pbmRleFNwbGluZUZyZXEpIHsKICAgICAgYXJyLnB1c2goc3BsaW5lVHJhY2Uob2JqLCAnaW5kZXgnLCBvYmouaW5kZXhTcGxpbmVGcmVxLCB0cnVlKSk7CiAgICB9CgogICAgaWYgKG9iai5pbmRleFBvaW50c0ZyZXEpIHsKICAgICAgYXJyLnB1c2goaW5kZXhUcmFjZShvYmosICdpbmRleCcsIG9iai5pbmRleFBvaW50c0ZyZXEpKTsKICAgIH0KICB9KTsKICByZXR1cm4gYXJyOwp9OwoKZXhwb3J0IGRlZmF1bHQgZm9ybWF0VHJhY2VzOw=="},{"version":3,"sources":["C:/Users/JThorneUMN/Documents/GitHub/dendro-plots/src/modules/traces.js"],"names":["store","createSpline","createIndex","simpleTrace","obj","colorBool","propA","propB","x","y","color","mode","shape","trace","Object","name","line","width","marker","symbol","size","type","splineTrace","prop","freq","splineFORindex","freqName","yearSpan","Math","abs","raw","length","indexObj","cache","index","find","o","id","splineObj","splines","spline","JSON","parse","stringify","applyColorToRaw","indexTrace","formatTraces","locVal","arr","Array","storeCopy","states","current","activeStates","filter","rawPointsActive","rawSplineFreq","indexPointsFreq","indexSplineFreq","activePlots","map","rawPlotLocation","indexPlotLocation","activeData","rawSpline","indexSpline","forEach","push"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,YAAP,MAAyB,aAAzB;AACA,OAAOC,WAAP,MAAwB,YAAxB;;AAEA,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,SAA1B,EAAqCC,KAArC,EAA4CC,KAA5C,EAAmD;AACjD,MAAIC,CAAC,GAAID,KAAD,GAAUH,GAAG,CAACE,KAAD,CAAH,CAAWC,KAAX,EAAkBC,CAA5B,GAAgCJ,GAAG,CAACE,KAAD,CAAH,CAAWE,CAAnD;AACA,MAAIC,CAAC,GAAIF,KAAD,GAAUH,GAAG,CAACE,KAAD,CAAH,CAAWC,KAAX,EAAkBE,CAA5B,GAAgCL,GAAG,CAACE,KAAD,CAAH,CAAWG,CAAnD;AACA,MAAIC,KAAK,GAAIL,SAAD,GAAcD,GAAG,CAACM,KAAlB,GAA0B,SAAtC;AACA,MAAIC,IAAI,GAAIP,GAAG,CAACQ,KAAL,GAAc,eAAd,GAAgC,OAA3C;AAEA,MAAIC,KAAK,GAAG,IAAIC,MAAJ,EAAZ;AACAD,EAAAA,KAAK,CAACE,IAAN,GAAaX,GAAG,CAACW,IAAjB;AACAF,EAAAA,KAAK,CAACL,CAAN,GAAUA,CAAV;AACAK,EAAAA,KAAK,CAACJ,CAAN,GAAUA,CAAV;AACAI,EAAAA,KAAK,CAACG,IAAN,GAAa;AAAEN,IAAAA,KAAK,EAAEA,KAAT;AAAgBO,IAAAA,KAAK,EAAE;AAAvB,GAAb;AACAJ,EAAAA,KAAK,CAACF,IAAN,GAAaA,IAAb;;AACA,MAAIP,GAAG,CAACQ,KAAR,EAAe;AACbC,IAAAA,KAAK,CAACK,MAAN,GAAe;AAAEC,MAAAA,MAAM,EAAEf,GAAG,CAACQ,KAAd;AAAqBQ,MAAAA,IAAI,EAAE;AAA3B,KAAf;AACD;;AACDP,EAAAA,KAAK,CAACQ,IAAN,GAAa,SAAb,CAfiD,CAe1B;;AAEvB,SAAOR,KAAP;AACD;;AAED,SAASS,WAAT,CAAqBlB,GAArB,EAA0BmB,IAA1B,EAAgCC,IAAhC,EAAsCC,cAAtC,EAAsD;AACpD,MAAIC,QAAQ,GAAI,MAAMF,IAAP,GAAe,IAA9B;;AACA,MAAIA,IAAI,GAAG,CAAX,EAAc;AACZ,QAAIG,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASzB,GAAG,CAAC0B,GAAJ,CAAQtB,CAAR,CAAUJ,GAAG,CAAC0B,GAAJ,CAAQtB,CAAR,CAAUuB,MAAV,GAAmB,CAA7B,IAAkC3B,GAAG,CAAC0B,GAAJ,CAAQtB,CAAR,CAAU,CAAV,CAA3C,IAA2D,CAA1E;AACAkB,IAAAA,QAAQ,GAAGF,IAAI,GAAG,GAAlB;AACAA,IAAAA,IAAI,GAAGA,IAAI,GAAGG,QAAd;AACD;;AAED,MAAInB,CAAJ,EAAOC,CAAP;;AACA,MAAIgB,cAAJ,EAAoB;AAClB,QAAIO,QAAQ,GAAGhC,KAAK,CAACiC,KAAN,CAAYC,KAAZ,CAAkBC,IAAlB,CAAuB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,EAAF,IAAQjC,GAAG,CAACiC,EAAhB;AAAA,KAAxB,CAAf;AACA,QAAIH,KAAK,GAAIF,QAAD,GAAaA,QAAQ,CAACR,IAAD,CAArB,GAA8B,IAA1C;;AACA,QAAI,CAACU,KAAL,EAAY;AACV,UAAII,SAAS,GAAGtC,KAAK,CAACiC,KAAN,CAAYM,OAAZ,CAAoBT,GAApB,CAAwBK,IAAxB,CAA6B,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,IAAQjC,GAAG,CAACiC,EAAhB;AAAA,OAA9B,CAAhB;AACA,UAAIG,MAAM,GAAIF,SAAS,IAAIA,SAAS,CAACd,IAAD,CAAvB,GAAiCc,SAAS,CAACd,IAAD,CAA1C,GAAmDvB,YAAY,CAACG,GAAG,CAAC0B,GAAJ,CAAQtB,CAAT,EAAYJ,GAAG,CAAC0B,GAAJ,CAAQrB,CAApB,EAAuBe,IAAvB,EAA6BpB,GAAG,CAACiC,EAAjC,EAAqCd,IAArC,EAA2C,KAA3C,CAA5E;AACAW,MAAAA,KAAK,GAAGhC,WAAW,CAACE,GAAG,CAAC0B,GAAJ,CAAQtB,CAAT,EAAYJ,GAAG,CAAC0B,GAAJ,CAAQrB,CAApB,EAAuB+B,MAAvB,EAA+BhB,IAA/B,EAAqCpB,GAAG,CAACiC,EAAzC,CAAnB;AACD;;AACD7B,IAAAA,CAAC,GAAG0B,KAAK,CAAC1B,CAAV;AACAC,IAAAA,CAAC,GAAGyB,KAAK,CAACzB,CAAV;AACD,GAVD,MAUO;AACLD,IAAAA,CAAC,GAAGJ,GAAG,CAAC0B,GAAJ,CAAQtB,CAAZ;AACAC,IAAAA,CAAC,GAAGL,GAAG,CAAC0B,GAAJ,CAAQrB,CAAZ;AACD,GAtBmD,CAwBpD;;;AACA,MAAI,CAACL,GAAG,CAACoC,MAAJ,CAAWjB,IAAX,CAAL,EAAuB;AACrB,QAAIiB,OAAM,GAAGvC,YAAY,CAACO,CAAD,EAAIC,CAAJ,EAAOe,IAAP,EAAapB,GAAG,CAACiC,EAAjB,EAAqBd,IAArB,CAAzB,CADqB,CAGrB;;;AACAnB,IAAAA,GAAG,CAACoC,MAAJ,CAAWjB,IAAX,IAAmB;AACjBf,MAAAA,CAAC,EAAEgC,OAAM,CAAChC,CADO;AAEjBC,MAAAA,CAAC,EAAE+B,OAAM,CAAC/B;AAFO,KAAnB;AAID;;AAEDL,EAAAA,GAAG,GAAGqC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAevC,GAAf,CAAX,CAAN;AACAA,EAAAA,GAAG,CAACW,IAAJ,GAAWX,GAAG,CAACW,IAAJ,GAAW,GAAX,GAAiBW,QAAjB,GAA2B,SAAtC;AACAtB,EAAAA,GAAG,CAACQ,KAAJ,GAAY,KAAZ;AAEA,MAAIC,KAAK,GAAGV,WAAW,CAACC,GAAD,EAAM,CAACA,GAAG,CAACwC,eAAX,EAA4B,QAA5B,EAAsCrB,IAAtC,CAAvB;AAEA,SAAOV,KAAP;AACD;;AAED,SAASgC,UAAT,CAAoBzC,GAApB,EAAyBmB,IAAzB,EAA+BC,IAA/B,EAAqC;AACnC,MAAIE,QAAQ,GAAI,MAAMF,IAAP,GAAe,IAA9B;;AACA,MAAIA,IAAI,GAAG,CAAX,EAAc;AACZ,QAAIG,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASzB,GAAG,CAAC0B,GAAJ,CAAQtB,CAAR,CAAUJ,GAAG,CAAC0B,GAAJ,CAAQtB,CAAR,CAAUuB,MAAV,GAAmB,CAA7B,IAAkC3B,GAAG,CAAC0B,GAAJ,CAAQtB,CAAR,CAAU,CAAV,CAA3C,IAA2D,CAA1E;AACAkB,IAAAA,QAAQ,GAAGF,IAAI,GAAG,GAAlB;AACAA,IAAAA,IAAI,GAAGA,IAAI,GAAGG,QAAd;AACD;;AAED,MAAI,CAACvB,GAAG,CAAC8B,KAAT,EAAgB;AACd;AACA,QAAII,SAAS,GAAGtC,KAAK,CAACiC,KAAN,CAAYM,OAAZ,CAAoBT,GAApB,CAAwBK,IAAxB,CAA6B,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,EAAF,IAAQjC,GAAG,CAACiC,EAAhB;AAAA,KAA9B,CAAhB;AACA,QAAIG,MAAM,GAAIF,SAAS,IAAIA,SAAS,CAACd,IAAD,CAAvB,GAAiCc,SAAS,CAACd,IAAD,CAA1C,GAAmDvB,YAAY,CAACG,GAAG,CAAC0B,GAAJ,CAAQtB,CAAT,EAAYJ,GAAG,CAAC0B,GAAJ,CAAQrB,CAApB,EAAuBe,IAAvB,EAA6BpB,GAAG,CAACiC,EAAjC,EAAqCd,IAArC,EAA2C,KAA3C,CAA5E;AACA,QAAIW,KAAK,GAAGhC,WAAW,CAACE,GAAG,CAAC0B,GAAJ,CAAQtB,CAAT,EAAYJ,GAAG,CAAC0B,GAAJ,CAAQrB,CAApB,EAAuB+B,MAAvB,EAA+BhB,IAA/B,EAAqCpB,GAAG,CAACiC,EAAzC,CAAvB,CAJc,CAMd;;AACAjC,IAAAA,GAAG,CAAC8B,KAAJ,GAAY;AACV1B,MAAAA,CAAC,EAAE0B,KAAK,CAAC1B,CADC;AAEVC,MAAAA,CAAC,EAAEyB,KAAK,CAACzB;AAFC,KAAZ;AAID;;AAEDL,EAAAA,GAAG,GAAGqC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAevC,GAAf,CAAX,CAAN;AACAA,EAAAA,GAAG,CAACW,IAAJ,GAAWX,GAAG,CAACW,IAAJ,GAAW,GAAX,GAAiBW,QAAjB,GAA2B,QAAtC;AAEA,MAAIb,KAAK,GAAGV,WAAW,CAACC,GAAD,EAAMA,GAAG,CAACwC,eAAV,EAA2BrB,IAA3B,CAAvB;AAEA,SAAOV,KAAP;AACD,C,CAED;;;AACA,IAAMiC,YAAY,GAAG,SAAfA,YAAe,CAASC,MAAT,EAAiB;AACpC,MAAIC,GAAG,GAAG,IAAIC,KAAJ,EAAV,CADoC,CAGpC;;AACA,MAAIC,SAAS,GAAGT,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe3C,KAAK,CAACmD,MAAN,CAAaC,OAA5B,CAAX,CAAhB,CAJoC,CAMpC;;AACA,MAAIC,YAAY,GAAGH,SAAS,CAACI,MAAV,CAAiB,UAAAlB,CAAC;AAAA,WAAKA,CAAC,CAACmB,eAAF,IAAqBnB,CAAC,CAACoB,aAAvB,IAAwCpB,CAAC,CAACqB,eAA1C,IAA6DrB,CAAC,CAACsB,eAApE;AAAA,GAAlB,CAAnB;AAEA,MAAIC,WAAW,GAAGN,YAAY,CAACO,GAAb,CAAiB,UAAAxB,CAAC,EAAI;AACtC,QAAIA,CAAC,CAACyB,eAAF,IAAqBd,MAAzB,EAAiC;AAC/B,aAAOX,CAAC,CAACmB,eAAT;AACA,aAAOnB,CAAC,CAACoB,aAAT;AACD;;AACD,QAAIpB,CAAC,CAAC0B,iBAAF,IAAuBf,MAA3B,EAAmC;AACjC,aAAOX,CAAC,CAACqB,eAAT;AACA,aAAOrB,CAAC,CAACsB,eAAT;AACD;;AAED,WAAOtB,CAAP;AACD,GAXiB,CAAlB,CAToC,CAsBpC;;AACA,MAAI2B,UAAU,GAAGJ,WAAW,CAACC,GAAZ,CAAgB,UAAAxD,GAAG,EAAI;AACtC;AACA,QAAI0B,GAAG,GAAG9B,KAAK,CAACiC,KAAN,CAAYH,GAAZ,CAAgBK,IAAhB,CAAqB,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACC,EAAF,IAAQjC,GAAG,CAACiC,EAAhB;AAAA,KAAtB,CAAV;AACAjC,IAAAA,GAAG,CAAC0B,GAAJ,GAAU;AACRtB,MAAAA,CAAC,EAAEsB,GAAG,CAACtB,CADC;AAERC,MAAAA,CAAC,EAAEqB,GAAG,CAACrB;AAFC,KAAV;;AAIA,QAAIL,GAAG,CAACoD,aAAR,EAAuB;AACrB,UAAIQ,SAAS,GAAGhE,KAAK,CAACiC,KAAN,CAAYM,OAAZ,CAAoBT,GAApB,CAAwBK,IAAxB,CAA6B,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,IAAQjC,GAAG,CAACiC,EAAhB;AAAA,OAA9B,CAAhB;AACAjC,MAAAA,GAAG,CAACoC,MAAJ,GAAa;AACXV,QAAAA,GAAG,EAAGkC,SAAD,GAAcA,SAAS,CAAC5D,GAAG,CAACoD,aAAL,CAAvB,GAA6C;AADvC,OAAb;AAGD;;AACD,QAAIpD,GAAG,CAACqD,eAAR,EAAyB;AACvB,UAAIvB,KAAK,GAAGlC,KAAK,CAACiC,KAAN,CAAYC,KAAZ,CAAkBC,IAAlB,CAAuB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,IAAQjC,GAAG,CAACiC,EAAhB;AAAA,OAAxB,CAAZ;AACAjC,MAAAA,GAAG,CAAC8B,KAAJ,GAAaA,KAAD,GAAUA,KAAK,CAAC9B,GAAG,CAACqD,eAAL,CAAf,GAAuC,IAAnD;AACD;;AACD,QAAIrD,GAAG,CAACsD,eAAR,EAAyB;AACvB,UAAIO,WAAW,GAAGjE,KAAK,CAACiC,KAAN,CAAYM,OAAZ,CAAoBL,KAApB,CAA0BC,IAA1B,CAA+B,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,IAAQjC,GAAG,CAACiC,EAAhB;AAAA,OAAhC,CAAlB;AACAjC,MAAAA,GAAG,CAACoC,MAAJ,GAAa;AACXN,QAAAA,KAAK,EAAG+B,WAAD,GAAgBA,WAAW,CAAC7D,GAAG,CAACsD,eAAL,CAA3B,GAAmD;AAD/C,OAAb;AAGD;;AAED,WAAOtD,GAAP;AACD,GAzBgB,CAAjB,CAvBoC,CAkDpC;AACA;AACA;;AACA2D,EAAAA,UAAU,CAACG,OAAX,CAAmB,UAAA9D,GAAG,EAAI;AACxB,QAAIA,GAAG,CAACoD,aAAR,EAAuB;AACrBR,MAAAA,GAAG,CAACmB,IAAJ,CAAS7C,WAAW,CAAClB,GAAD,EAAM,KAAN,EAAaA,GAAG,CAACoD,aAAjB,CAApB;AACD;;AACD,QAAIpD,GAAG,CAACmD,eAAR,EAAyB;AACvBP,MAAAA,GAAG,CAACmB,IAAJ,CAAShE,WAAW,CAACC,GAAD,EAAMA,GAAG,CAACwC,eAAV,EAA2B,KAA3B,CAApB;AACD;;AACD,QAAIxC,GAAG,CAACsD,eAAR,EAAyB;AACvBV,MAAAA,GAAG,CAACmB,IAAJ,CAAS7C,WAAW,CAAClB,GAAD,EAAM,OAAN,EAAeA,GAAG,CAACsD,eAAnB,EAAoC,IAApC,CAApB;AACD;;AACD,QAAItD,GAAG,CAACqD,eAAR,EAAyB;AACvBT,MAAAA,GAAG,CAACmB,IAAJ,CAAStB,UAAU,CAACzC,GAAD,EAAM,OAAN,EAAeA,GAAG,CAACqD,eAAnB,CAAnB;AACD;AACF,GAbD;AAeA,SAAOT,GAAP;AACD,CArED;;AAuEA,eAAeF,YAAf","sourcesContent":["import store from './store.js'\r\nimport createSpline from './spline.js'\r\nimport createIndex from './index.js'\r\n\r\nfunction simpleTrace(obj, colorBool, propA, propB) {\r\n  let x = (propB) ? obj[propA][propB].x : obj[propA].x\r\n  let y = (propB) ? obj[propA][propB].y : obj[propA].y\r\n  let color = (colorBool) ? obj.color : '#797979'\r\n  let mode = (obj.shape) ? 'lines+markers' : 'lines'\r\n\r\n  let trace = new Object()\r\n  trace.name = obj.name\r\n  trace.x = x\r\n  trace.y = y\r\n  trace.line = { color: color, width: 3 }\r\n  trace.mode = mode\r\n  if (obj.shape) {\r\n    trace.marker = { symbol: obj.shape, size: 6 }\r\n  }\r\n  trace.type = 'scatter' // need scatter gl\r\n\r\n  return trace\r\n}\r\n\r\nfunction splineTrace(obj, prop, freq, splineFORindex) {\r\n  let freqName = (100 * freq) + 'yr'\r\n  if (freq < 1) {\r\n    let yearSpan = Math.abs(obj.raw.x[obj.raw.x.length - 1] - obj.raw.x[0]) + 1\r\n    freqName = freq + '%'\r\n    freq = freq * yearSpan\r\n  }\r\n\r\n  let x, y\r\n  if (splineFORindex) {\r\n    let indexObj = store.cache.index.find(o => o.id == obj.id)\r\n    let index = (indexObj) ? indexObj[freq] : null\r\n    if (!index) {\r\n      let splineObj = store.cache.splines.raw.find(o => o.id == obj.id)\r\n      let spline = (splineObj && splineObj[freq]) ? splineObj[freq] : createSpline(obj.raw.x, obj.raw.y, freq, obj.id, prop, 'raw')\r\n      index = createIndex(obj.raw.x, obj.raw.y, spline, freq, obj.id)\r\n    }\r\n    x = index.x\r\n    y = index.y\r\n  } else {\r\n    x = obj.raw.x\r\n    y = obj.raw.y\r\n  }\r\n\r\n  // spline data previously saved\r\n  if (!obj.spline[prop]) {\r\n    let spline = createSpline(x, y, freq, obj.id, prop)\r\n\r\n    // add spline to obj\r\n    obj.spline[prop] = {\r\n      x: spline.x,\r\n      y: spline.y,\r\n    }\r\n  }\r\n\r\n  obj = JSON.parse(JSON.stringify(obj))\r\n  obj.name = obj.name + '_' + freqName +'_spline'\r\n  obj.shape = false\r\n\r\n  let trace = simpleTrace(obj, !obj.applyColorToRaw, 'spline', prop)\r\n\r\n  return trace\r\n}\r\n\r\nfunction indexTrace(obj, prop, freq) {\r\n  let freqName = (100 * freq) + 'yr'\r\n  if (freq < 1) {\r\n    let yearSpan = Math.abs(obj.raw.x[obj.raw.x.length - 1] - obj.raw.x[0]) + 1\r\n    freqName = freq + '%'\r\n    freq = freq * yearSpan\r\n  }\r\n\r\n  if (!obj.index) {\r\n    // check if spline exists in order to compute index\r\n    let splineObj = store.cache.splines.raw.find(o => o.id == obj.id)\r\n    let spline = (splineObj && splineObj[freq]) ? splineObj[freq] : createSpline(obj.raw.x, obj.raw.y, freq, obj.id, prop, 'raw')\r\n    let index = createIndex(obj.raw.x, obj.raw.y, spline, freq, obj.id)\r\n\r\n    // add index to obj\r\n    obj.index = {\r\n      x: index.x,\r\n      y: index.y\r\n    }\r\n  }\r\n\r\n  obj = JSON.parse(JSON.stringify(obj))\r\n  obj.name = obj.name + '_' + freqName +'_index'\r\n\r\n  let trace = simpleTrace(obj, obj.applyColorToRaw, prop)\r\n\r\n  return trace\r\n}\r\n\r\n// param (locVal): plot location value\r\nconst formatTraces = function(locVal) {\r\n  let arr = new Array()\r\n\r\n  // create array with data only intended for specified plot\r\n  let storeCopy = JSON.parse(JSON.stringify(store.states.current))\r\n\r\n  // filter out inactive data sets\r\n  let activeStates = storeCopy.filter(o => (o.rawPointsActive || o.rawSplineFreq || o.indexPointsFreq || o.indexSplineFreq))\r\n\r\n  let activePlots = activeStates.map(o => {\r\n    if (o.rawPlotLocation != locVal) {\r\n      delete o.rawPointsActive\r\n      delete o.rawSplineFreq\r\n    }\r\n    if (o.indexPlotLocation != locVal) {\r\n      delete o.indexPointsFreq\r\n      delete o.indexSplineFreq\r\n    }\r\n\r\n    return o\r\n  })\r\n\r\n  // add required raw data, splines, & index to states\r\n  let activeData = activePlots.map(obj => {\r\n    // add raw data to all in-case spline or index requires computation\r\n    let raw = store.cache.raw.find(o => o.id == obj.id)\r\n    obj.raw = {\r\n      x: raw.x,\r\n      y: raw.y\r\n    }\r\n    if (obj.rawSplineFreq) {\r\n      let rawSpline = store.cache.splines.raw.find(o => o.id == obj.id)\r\n      obj.spline = {\r\n        raw: (rawSpline) ? rawSpline[obj.rawSplineFreq] : null\r\n      }\r\n    }\r\n    if (obj.indexPointsFreq) {\r\n      let index = store.cache.index.find(o => o.id == obj.id)\r\n      obj.index = (index) ? index[obj.indexPointsFreq] : null\r\n    }\r\n    if (obj.indexSplineFreq) {\r\n      let indexSpline = store.cache.splines.index.find(o => o.id == obj.id)\r\n      obj.spline = {\r\n        index: (indexSpline) ? indexSpline[obj.indexSplineFreq] : null\r\n      }\r\n    }\r\n\r\n    return obj\r\n  })\r\n\r\n  // create traces based on needed format\r\n  // order of creation important\r\n  // most recent trace rendered on top of earlier traces\r\n  activeData.forEach(obj => {\r\n    if (obj.rawSplineFreq) {\r\n      arr.push(splineTrace(obj, 'raw', obj.rawSplineFreq))\r\n    }\r\n    if (obj.rawPointsActive) {\r\n      arr.push(simpleTrace(obj, obj.applyColorToRaw, 'raw'))\r\n    }\r\n    if (obj.indexSplineFreq) {\r\n      arr.push(splineTrace(obj, 'index', obj.indexSplineFreq, true))\r\n    }\r\n    if (obj.indexPointsFreq) {\r\n      arr.push(indexTrace(obj, 'index', obj.indexPointsFreq))\r\n    }\r\n  })\r\n\r\n  return arr\r\n}\r\n\r\nexport default formatTraces\r\n"]}]}