{"remainingRequest":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\src\\modules\\median.js","dependencies":[{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\src\\modules\\median.js","mtime":1631047090118},{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIkM6L1VzZXJzL0pUaG9ybmVVTU4vRG9jdW1lbnRzL0dpdEh1Yi9kZW5kcm8tcGxvdHMvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5wYXJzZS1pbnQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5wYXJzZS1mbG9hdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7Cgp2YXIgY3JlYXRlTWVkaWFuID0gZnVuY3Rpb24gY3JlYXRlTWVkaWFuKGRhdGFBcnJheSkgewogIHZhciBsb25nZXN0RGF0YUxlbmd0aCA9IDA7CgogIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihkYXRhQXJyYXkpLAogICAgICBfc3RlcDsKCiAgdHJ5IHsKICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgIHZhciBfc2V0ID0gX3N0ZXAudmFsdWU7CiAgICAgIHZhciBzZXRMZW5ndGggPSBfc2V0LnkubGVuZ3RoOwoKICAgICAgaWYgKHNldExlbmd0aCA+IGxvbmdlc3REYXRhTGVuZ3RoKSB7CiAgICAgICAgbG9uZ2VzdERhdGFMZW5ndGggPSBzZXRMZW5ndGg7CiAgICAgIH0KICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9pdGVyYXRvci5lKGVycik7CiAgfSBmaW5hbGx5IHsKICAgIF9pdGVyYXRvci5mKCk7CiAgfQoKICB2YXIgbWVkaWFuWWVhcnMgPSBbXTsKICB2YXIgbWVkaWFuV2lkdGhzID0gW107CiAgdmFyIHllYXJfdG9fZmluZF9tZWRpYW5fd2lkdGhfZm9yID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7CiAgdmFyIGxhc3RfeWVhcl90b19hY2NvdW50X2ZvciA9IC0xICogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7CgogIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZGF0YUFycmF5KSwKICAgICAgX3N0ZXAyOwoKICB0cnkgewogICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHsKICAgICAgdmFyIF9zZXQyID0gX3N0ZXAyLnZhbHVlOwoKICAgICAgdmFyIHllYXJzID0gX3NldDIueC5maWx0ZXIoQm9vbGVhbik7CgogICAgICB2YXIgc2V0c19maXJzdF95ZWFyID0gcGFyc2VJbnQoeWVhcnNbMF0pOwoKICAgICAgaWYgKHNldHNfZmlyc3RfeWVhciA8IHllYXJfdG9fZmluZF9tZWRpYW5fd2lkdGhfZm9yKSB7CiAgICAgICAgLy8gZmluZCBvbGRlc3QgKHNtYWxsZXN0KSB5ZWFyIGluIGFsbCBzZXRzIG9mIGRhdGEKICAgICAgICB5ZWFyX3RvX2ZpbmRfbWVkaWFuX3dpZHRoX2ZvciA9IHNldHNfZmlyc3RfeWVhcjsKICAgICAgfQoKICAgICAgdmFyIHNldHNfbGFzdF95ZWFyID0gcGFyc2VJbnQoeWVhcnNbeWVhcnMubGVuZ3RoIC0gMV0pOwoKICAgICAgaWYgKHNldHNfbGFzdF95ZWFyID4gbGFzdF95ZWFyX3RvX2FjY291bnRfZm9yKSB7CiAgICAgICAgLy8gZmluZCBtb3N0IHJlY2VudCAobGFyZ2VzdCkgeWVhciBpbiBhbGwgc2V0cyBvZiBkYXRhCiAgICAgICAgbGFzdF95ZWFyX3RvX2FjY291bnRfZm9yID0gc2V0c19sYXN0X3llYXI7CiAgICAgIH0KICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9pdGVyYXRvcjIuZShlcnIpOwogIH0gZmluYWxseSB7CiAgICBfaXRlcmF0b3IyLmYoKTsKICB9CgogIHdoaWxlICh5ZWFyX3RvX2ZpbmRfbWVkaWFuX3dpZHRoX2ZvciA8PSBsYXN0X3llYXJfdG9fYWNjb3VudF9mb3IpIHsKICAgIHZhciBzaW5nbGVfeWVhcl93aWR0aHMgPSBbXTsKCiAgICB2YXIgX2l0ZXJhdG9yMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRhdGFBcnJheSksCiAgICAgICAgX3N0ZXAzOwoKICAgIHRyeSB7CiAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7CiAgICAgICAgdmFyIHNldCA9IF9zdGVwMy52YWx1ZTsKCiAgICAgICAgLy8gbG9vcCB0aHJvdWdoIGRhdGEgc2V0cwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2V0LngubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCB5ZWFycyAmIHdpZHRocyBvZiBlYWNoIGRhdGEgc2V0CiAgICAgICAgICBpZiAoc2V0LngubGVuZ3RoID4gMCAmJiBwYXJzZUludChzZXQueFtpXSkgPT0geWVhcl90b19maW5kX21lZGlhbl93aWR0aF9mb3IpIHsKICAgICAgICAgICAgc2luZ2xlX3llYXJfd2lkdGhzLnB1c2gocGFyc2VGbG9hdChzZXQueVtpXSkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgIF9pdGVyYXRvcjMuZShlcnIpOwogICAgfSBmaW5hbGx5IHsKICAgICAgX2l0ZXJhdG9yMy5mKCk7CiAgICB9CgogICAgc2luZ2xlX3llYXJfd2lkdGhzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgcmV0dXJuIGEgLSBiOwogICAgfSk7IC8vIHNvcnQgaW50byBhc3NjZW5kaW5nIG9yZGVyCgogICAgaWYgKHNpbmdsZV95ZWFyX3dpZHRocy5sZW5ndGggPT0gMCkgewogICAgICBtZWRpYW5XaWR0aHMucHVzaCgnMCcpOwogICAgfSBlbHNlIGlmIChzaW5nbGVfeWVhcl93aWR0aHMubGVuZ3RoICUgMiA9PSAwKSB7CiAgICAgIC8vIGlmIGV2ZW4gbGVuZ3RoLCBuZWVkIHRvIHRha2UgYXZlcmFnZSBvZiBtaWRkbGUgdmFsdWVzCiAgICAgIHZhciBtaWRVcHBlciA9IHNpbmdsZV95ZWFyX3dpZHRocy5sZW5ndGggLyAyOwogICAgICB2YXIgbWlkTG93ZXIgPSBzaW5nbGVfeWVhcl93aWR0aHMubGVuZ3RoIC8gMiAtIDE7CiAgICAgIHZhciB2YWx1ZSA9IChzaW5nbGVfeWVhcl93aWR0aHNbbWlkVXBwZXJdICsgc2luZ2xlX3llYXJfd2lkdGhzW21pZExvd2VyXSkgLyAyOwogICAgICBtZWRpYW5XaWR0aHMucHVzaCh2YWx1ZSk7CiAgICB9IGVsc2UgewogICAgICB2YXIgbWlkID0gTWF0aC5mbG9vcihzaW5nbGVfeWVhcl93aWR0aHMubGVuZ3RoIC8gMik7CiAgICAgIG1lZGlhbldpZHRocy5wdXNoKHNpbmdsZV95ZWFyX3dpZHRoc1ttaWRdKTsKICAgIH0KCiAgICBtZWRpYW5ZZWFycy5wdXNoKHllYXJfdG9fZmluZF9tZWRpYW5fd2lkdGhfZm9yKTsKICAgIHllYXJfdG9fZmluZF9tZWRpYW5fd2lkdGhfZm9yKys7CiAgfSAvLyAyKSBhZGQgdG8gZGF0YQoKCiAgdmFyIG1lZGlhblNldCA9IG5ldyBPYmplY3QoKTsKICBtZWRpYW5TZXQueSA9IG1lZGlhbldpZHRoczsKICBtZWRpYW5TZXQueCA9IG1lZGlhblllYXJzOwogIHJldHVybiBtZWRpYW5TZXQ7Cn07CgpleHBvcnQgZGVmYXVsdCBjcmVhdGVNZWRpYW47"},{"version":3,"sources":["C:/Users/JThorneUMN/Documents/GitHub/dendro-plots/src/modules/median.js"],"names":["createMedian","dataArray","longestDataLength","set","setLength","y","length","medianYears","medianWidths","year_to_find_median_width_for","Number","MAX_SAFE_INTEGER","last_year_to_account_for","years","x","filter","Boolean","sets_first_year","parseInt","sets_last_year","single_year_widths","i","push","parseFloat","sort","a","b","midUpper","midLower","value","mid","Math","floor","medianSet","Object"],"mappings":"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","sourcesContent":["const createMedian = function (dataArray) {\r\n  var longestDataLength = 0;\r\n  for (let set of dataArray) {\r\n    var setLength = set.y.length;\r\n    if (setLength > longestDataLength) {\r\n      longestDataLength = setLength;\r\n    }\r\n  }\r\n\r\n  var medianYears = [];\r\n  var medianWidths = [];\r\n  var year_to_find_median_width_for = Number.MAX_SAFE_INTEGER;\r\n  var last_year_to_account_for = -1 * (Number.MAX_SAFE_INTEGER);\r\n\r\n  for (let set of dataArray) {\r\n    let years = set.x.filter(Boolean);\r\n\r\n    var sets_first_year = parseInt(years[0])\r\n    if (sets_first_year < year_to_find_median_width_for) { // find oldest (smallest) year in all sets of data\r\n      year_to_find_median_width_for = sets_first_year;\r\n    }\r\n\r\n    var sets_last_year = parseInt(years[years.length - 1])\r\n    if (sets_last_year > last_year_to_account_for) { // find most recent (largest) year in all sets of data\r\n      last_year_to_account_for = sets_last_year;\r\n    }\r\n  }\r\n\r\n  while (year_to_find_median_width_for <= last_year_to_account_for) {\r\n    var single_year_widths = []\r\n    for (let set of dataArray) { // loop through data sets\r\n      for (let i = 0; i < set.x.length; i++) { // loop through years & widths of each data set\r\n        if ((set.x.length > 0) && (parseInt(set.x[i]) == year_to_find_median_width_for)) {\r\n          single_year_widths.push(parseFloat(set.y[i]));\r\n        }\r\n      }\r\n    }\r\n\r\n    single_year_widths.sort( (a, b) => { return a - b} ); // sort into asscending order\r\n    if (single_year_widths.length == 0) {\r\n      medianWidths.push('0');\r\n    } else if (single_year_widths.length % 2 == 0) { // if even length, need to take average of middle values\r\n      var midUpper = (single_year_widths.length / 2);\r\n      var midLower = (single_year_widths.length / 2) - 1;\r\n      var value = (single_year_widths[midUpper] + single_year_widths[midLower]) / 2;\r\n      medianWidths.push(value);\r\n    } else {\r\n      var mid = Math.floor(single_year_widths.length / 2);\r\n      medianWidths.push(single_year_widths[mid]);\r\n    }\r\n    medianYears.push(year_to_find_median_width_for);\r\n    year_to_find_median_width_for++;\r\n  }\r\n\r\n  // 2) add to data\r\n  var medianSet = new Object();\r\n  medianSet.y = medianWidths;\r\n  medianSet.x = medianYears;\r\n\r\n  return medianSet\r\n}\r\n\r\nexport default createMedian\r\n"]}]}