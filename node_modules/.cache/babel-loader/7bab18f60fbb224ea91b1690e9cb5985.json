{"remainingRequest":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\src\\components\\SubComponents\\Plot.vue?vue&type=template&id=bd0919ac&scoped=true","dependencies":[{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\src\\components\\SubComponents\\Plot.vue","mtime":1631043585999},{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1628298225000},{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1628298225000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgd2l0aFNjb3BlSWQgYXMgX3dpdGhTY29wZUlkIH0gZnJvbSAidnVlIjsKCnZhciBfd2l0aElkID0gLyojX19QVVJFX18qL193aXRoU2NvcGVJZCgiZGF0YS12LWJkMDkxOWFjIik7CgpleHBvcnQgdmFyIHJlbmRlciA9IC8qI19fUFVSRV9fKi9fd2l0aElkKGZ1bmN0aW9uIChfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soImRpdiIsIHsKICAgICJjbGFzcyI6ICJwbG90bHktZGl2IiwKICAgIHJlZjogJG9wdGlvbnMuZGl2SUQKICB9LCBudWxsLCA1MTIKICAvKiBORUVEX1BBVENIICovCiAgKTsKfSk7"},{"version":3,"sources":["C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\src\\components\\SubComponents\\Plot.vue"],"names":[],"mappings":";;;;;uBACE,YAAA,CAGM,KAHN,EAGM;AAHD,aAAM,YAGL;AAFA,IAAA,GAAG,EAAE,QAAA,CAAA;AAEL,GAHN,E,IAAA,E;;AAAA,G","sourcesContent":["<template>\r\n  <div class=\"plotly-div\"\r\n       :ref=\"divID\"\r\n  >\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import Plotly from 'plotly.js'\r\n  import formatTraces from '../../modules/traces.js'\r\n\r\n  export default {\r\n    inject: ['store'],\r\n    props: ['value', 'name', 'count'],\r\n    components: { },\r\n    computed: {\r\n      divID: function() {\r\n        return String(Math.floor(Math.random() * (99999 - 10000 + 1)) + 10000)\r\n      },\r\n      traces: function() {\r\n        return formatTraces(this.value)\r\n      },\r\n      layout: function() {\r\n        let obj = new Object()\r\n        obj.title = {\r\n          text: this.name,\r\n          x: 0,\r\n          pad: {\r\n            l: 20,\r\n          }\r\n        }\r\n        obj.showlegend = true\r\n        obj.legend = {\r\n          title: {\r\n            text: 'Legend',\r\n          },\r\n          orientation: 'h'\r\n        }\r\n        obj.xaxis = {\r\n          title: {\r\n            text: '',\r\n            font: {\r\n              size: 12,\r\n            }\r\n          }\r\n        }\r\n        obj.yaxis = {\r\n          title: {\r\n            font: {\r\n              size: 12,\r\n            }\r\n          }\r\n        }\r\n        obj.margin = {\r\n          t: 60,\r\n          b: 60,\r\n          l: 60,\r\n          r: 60,\r\n        }\r\n        return obj\r\n      },\r\n      config: function() {\r\n        let obj = new Object()\r\n        obj.responsive = false // causes mode bar issue when true\r\n        obj.scrollZoom = true\r\n        obj.displayModeBar = true\r\n        obj.modeBarButtonsToRemove = ['select2d', 'lasso2d', 'zoomIn2d', 'zoomOut2d', 'autoScale2d']\r\n        obj.editable = true\r\n        obj.displaylogo = false\r\n        return obj\r\n      }\r\n    },\r\n    methods: {\r\n      resizePlot: function() {\r\n        if (!this.$refs[this.divID]) {\r\n          return\r\n        }\r\n        let w = document.getElementById('plot-management').offsetWidth;\r\n        let h = window.innerHeight / this.count\r\n        Plotly.relayout(this.$refs[this.divID], { width: w, height: h })\r\n      }\r\n    },\r\n    watch: {\r\n      'store.states.current': {\r\n        handler: function() {\r\n          Plotly.react(this.$refs[this.divID], this.traces, this.layout, this.config)\r\n        },\r\n        deep: true\r\n      },\r\n      count: {\r\n        handler: function() {\r\n          this.resizePlot()\r\n        },\r\n      },\r\n    },\r\n    mounted() {\r\n      Plotly.newPlot(this.$refs[this.divID], this.traces, this.layout, this.config)\r\n      this.resizePlot()\r\n      window.addEventListener('resize', () => {\r\n        this.resizePlot()\r\n      })\r\n    },\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n  .plotly-div {\r\n    width: 100%;\r\n  }\r\n</style>\r\n"],"sourceRoot":""}]}