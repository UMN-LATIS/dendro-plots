{"remainingRequest":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\plotting-app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\plotting-app\\src\\modules\\median.js","dependencies":[{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\plotting-app\\src\\modules\\median.js","mtime":1628515699798},{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\plotting-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\plotting-app\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIkM6L1VzZXJzL0pUaG9ybmVVTU4vRG9jdW1lbnRzL0dpdEh1Yi9kZW5kcm8tcGxvdHMvcGxvdHRpbmctYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKCnZhciBtZWRpYW4gPSBmdW5jdGlvbiBtZWRpYW4oZGF0YUFycmF5KSB7CiAgdmFyIGxvbmdlc3REYXRhTGVuZ3RoID0gMDsKCiAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRhdGFBcnJheSksCiAgICAgIF9zdGVwOwoKICB0cnkgewogICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgdmFyIF9zZXQgPSBfc3RlcC52YWx1ZTsKICAgICAgdmFyIHNldExlbmd0aCA9IF9zZXQueS5sZW5ndGg7CgogICAgICBpZiAoc2V0TGVuZ3RoID4gbG9uZ2VzdERhdGFMZW5ndGgpIHsKICAgICAgICBsb25nZXN0RGF0YUxlbmd0aCA9IHNldExlbmd0aDsKICAgICAgfQogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2l0ZXJhdG9yLmUoZXJyKTsKICB9IGZpbmFsbHkgewogICAgX2l0ZXJhdG9yLmYoKTsKICB9CgogIHZhciBtZWRpYW5ZZWFycyA9IFtdOwogIHZhciBtZWRpYW5XaWR0aHMgPSBbXTsKICB2YXIgeWVhcl90b19maW5kX21lZGlhbl93aWR0aF9mb3IgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjsKICB2YXIgbGFzdF95ZWFyX3RvX2FjY291bnRfZm9yID0gLTEgKiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjsKCiAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihkYXRhQXJyYXkpLAogICAgICBfc3RlcDI7CgogIHRyeSB7CiAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykgewogICAgICB2YXIgX3NldDIgPSBfc3RlcDIudmFsdWU7CgogICAgICB2YXIgeWVhcnMgPSBfc2V0Mi54LmZpbHRlcihCb29sZWFuKTsKCiAgICAgIHZhciBzZXRzX2ZpcnN0X3llYXIgPSBwYXJzZUludCh5ZWFyc1swXSk7CgogICAgICBpZiAoc2V0c19maXJzdF95ZWFyIDwgeWVhcl90b19maW5kX21lZGlhbl93aWR0aF9mb3IpIHsKICAgICAgICAvLyBmaW5kIG9sZGVzdCAoc21hbGxlc3QpIHllYXIgaW4gYWxsIHNldHMgb2YgZGF0YQogICAgICAgIHllYXJfdG9fZmluZF9tZWRpYW5fd2lkdGhfZm9yID0gc2V0c19maXJzdF95ZWFyOwogICAgICB9CgogICAgICB2YXIgc2V0c19sYXN0X3llYXIgPSBwYXJzZUludCh5ZWFyc1t5ZWFycy5sZW5ndGggLSAxXSk7CgogICAgICBpZiAoc2V0c19sYXN0X3llYXIgPiBsYXN0X3llYXJfdG9fYWNjb3VudF9mb3IpIHsKICAgICAgICAvLyBmaW5kIG1vc3QgcmVjZW50IChsYXJnZXN0KSB5ZWFyIGluIGFsbCBzZXRzIG9mIGRhdGEKICAgICAgICBsYXN0X3llYXJfdG9fYWNjb3VudF9mb3IgPSBzZXRzX2xhc3RfeWVhcjsKICAgICAgfQogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2l0ZXJhdG9yMi5lKGVycik7CiAgfSBmaW5hbGx5IHsKICAgIF9pdGVyYXRvcjIuZigpOwogIH0KCiAgd2hpbGUgKHllYXJfdG9fZmluZF9tZWRpYW5fd2lkdGhfZm9yIDw9IGxhc3RfeWVhcl90b19hY2NvdW50X2ZvcikgewogICAgdmFyIHNpbmdsZV95ZWFyX3dpZHRocyA9IFtdOwoKICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZGF0YUFycmF5KSwKICAgICAgICBfc3RlcDM7CgogICAgdHJ5IHsKICAgICAgZm9yIChfaXRlcmF0b3IzLnMoKTsgIShfc3RlcDMgPSBfaXRlcmF0b3IzLm4oKSkuZG9uZTspIHsKICAgICAgICB2YXIgc2V0ID0gX3N0ZXAzLnZhbHVlOwoKICAgICAgICAvLyBsb29wIHRocm91Z2ggZGF0YSBzZXRzCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXQueC5sZW5ndGg7IGkrKykgewogICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHllYXJzICYgd2lkdGhzIG9mIGVhY2ggZGF0YSBzZXQKICAgICAgICAgIGlmIChzZXQueC5sZW5ndGggPiAwICYmIHBhcnNlSW50KHNldC54W2ldKSA9PSB5ZWFyX3RvX2ZpbmRfbWVkaWFuX3dpZHRoX2ZvcikgewogICAgICAgICAgICBzaW5nbGVfeWVhcl93aWR0aHMucHVzaChwYXJzZUZsb2F0KHNldC55W2ldKSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgX2l0ZXJhdG9yMy5lKGVycik7CiAgICB9IGZpbmFsbHkgewogICAgICBfaXRlcmF0b3IzLmYoKTsKICAgIH0KCiAgICBzaW5nbGVfeWVhcl93aWR0aHMuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICByZXR1cm4gYSAtIGI7CiAgICB9KTsgLy8gc29ydCBpbnRvIGFzc2NlbmRpbmcgb3JkZXIKCiAgICBpZiAoc2luZ2xlX3llYXJfd2lkdGhzLmxlbmd0aCA9PSAwKSB7CiAgICAgIG1lZGlhbldpZHRocy5wdXNoKCcwJyk7CiAgICB9IGVsc2UgaWYgKHNpbmdsZV95ZWFyX3dpZHRocy5sZW5ndGggJSAyID09IDApIHsKICAgICAgLy8gaWYgZXZlbiBsZW5ndGgsIG5lZWQgdG8gdGFrZSBhdmVyYWdlIG9mIG1pZGRsZSB2YWx1ZXMKICAgICAgdmFyIG1pZFVwcGVyID0gc2luZ2xlX3llYXJfd2lkdGhzLmxlbmd0aCAvIDI7CiAgICAgIHZhciBtaWRMb3dlciA9IHNpbmdsZV95ZWFyX3dpZHRocy5sZW5ndGggLyAyIC0gMTsKICAgICAgdmFyIHZhbHVlID0gKHNpbmdsZV95ZWFyX3dpZHRoc1ttaWRVcHBlcl0gKyBzaW5nbGVfeWVhcl93aWR0aHNbbWlkTG93ZXJdKSAvIDI7CiAgICAgIG1lZGlhbldpZHRocy5wdXNoKHZhbHVlKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBtaWQgPSBNYXRoLmZsb29yKHNpbmdsZV95ZWFyX3dpZHRocy5sZW5ndGggLyAyKTsKICAgICAgbWVkaWFuV2lkdGhzLnB1c2goc2luZ2xlX3llYXJfd2lkdGhzW21pZF0pOwogICAgfQoKICAgIG1lZGlhblllYXJzLnB1c2goeWVhcl90b19maW5kX21lZGlhbl93aWR0aF9mb3IpOwogICAgeWVhcl90b19maW5kX21lZGlhbl93aWR0aF9mb3IrKzsKICB9IC8vIDIpIGFkZCB0byBkYXRhCgoKICB2YXIgbWVkaWFuU2V0ID0gbmV3IE9iamVjdCgpOwogIG1lZGlhblNldC55ID0gbWVkaWFuV2lkdGhzOwogIG1lZGlhblNldC54ID0gbWVkaWFuWWVhcnM7CiAgcmV0dXJuIG1lZGlhblNldDsKfTsKCmV4cG9ydCBkZWZhdWx0IG1lZGlhbjs="},{"version":3,"sources":["C:/Users/JThorneUMN/Documents/GitHub/dendro-plots/plotting-app/src/modules/median.js"],"names":["median","dataArray","longestDataLength","set","setLength","y","length","medianYears","medianWidths","year_to_find_median_width_for","Number","MAX_SAFE_INTEGER","last_year_to_account_for","years","x","filter","Boolean","sets_first_year","parseInt","sets_last_year","single_year_widths","i","push","parseFloat","sort","a","b","midUpper","midLower","value","mid","Math","floor","medianSet","Object"],"mappings":"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","sourcesContent":["const median = function (dataArray) {\r\n  var longestDataLength = 0;\r\n  for (let set of dataArray) {\r\n    var setLength = set.y.length;\r\n    if (setLength > longestDataLength) {\r\n      longestDataLength = setLength;\r\n    }\r\n  }\r\n\r\n  var medianYears = [];\r\n  var medianWidths = [];\r\n  var year_to_find_median_width_for = Number.MAX_SAFE_INTEGER;\r\n  var last_year_to_account_for = -1 * (Number.MAX_SAFE_INTEGER);\r\n\r\n  for (let set of dataArray) {\r\n    let years = set.x.filter(Boolean);\r\n\r\n    var sets_first_year = parseInt(years[0])\r\n    if (sets_first_year < year_to_find_median_width_for) { // find oldest (smallest) year in all sets of data\r\n      year_to_find_median_width_for = sets_first_year;\r\n    }\r\n\r\n    var sets_last_year = parseInt(years[years.length - 1])\r\n    if (sets_last_year > last_year_to_account_for) { // find most recent (largest) year in all sets of data\r\n      last_year_to_account_for = sets_last_year;\r\n    }\r\n  }\r\n\r\n  while (year_to_find_median_width_for <= last_year_to_account_for) {\r\n    var single_year_widths = []\r\n    for (let set of dataArray) { // loop through data sets\r\n      for (let i = 0; i < set.x.length; i++) { // loop through years & widths of each data set\r\n        if ((set.x.length > 0) && (parseInt(set.x[i]) == year_to_find_median_width_for)) {\r\n          single_year_widths.push(parseFloat(set.y[i]));\r\n        }\r\n      }\r\n    }\r\n\r\n    single_year_widths.sort( (a, b) => { return a - b} ); // sort into asscending order\r\n    if (single_year_widths.length == 0) {\r\n      medianWidths.push('0');\r\n    } else if (single_year_widths.length % 2 == 0) { // if even length, need to take average of middle values\r\n      var midUpper = (single_year_widths.length / 2);\r\n      var midLower = (single_year_widths.length / 2) - 1;\r\n      var value = (single_year_widths[midUpper] + single_year_widths[midLower]) / 2;\r\n      medianWidths.push(value);\r\n    } else {\r\n      var mid = Math.floor(single_year_widths.length / 2);\r\n      medianWidths.push(single_year_widths[mid]);\r\n    }\r\n    medianYears.push(year_to_find_median_width_for);\r\n    year_to_find_median_width_for++;\r\n  }\r\n\r\n  // 2) add to data\r\n  var medianSet = new Object();\r\n  medianSet.y = medianWidths;\r\n  medianSet.x = medianYears;\r\n\r\n  return medianSet\r\n}\r\n\r\nexport default median\r\n"]}]}