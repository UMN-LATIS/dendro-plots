{"remainingRequest":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\plotting-app\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\plotting-app\\src\\composables\\formatFileData.js","dependencies":[{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\plotting-app\\src\\composables\\formatFileData.js","mtime":1628512055939},{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\plotting-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\JThorneUMN\\Documents\\GitHub\\dendro-plots\\plotting-app\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/JThorneUMN/Documents/GitHub/dendro-plots/plotting-app/src/composables/formatFileData.js"],"names":["Papa","toMM","num","length","slice","formatRWL","data","formattedData","headerLength","array","test_character","charAt","isNaN","parseFloat","splice","rwlSplitData","splitData","split","push","newHeader","currentName","rowName","earliestYear","Number","MAX_SAFE_INTEGER","latestDecade","latestYear","rwlData1","JSON","parse","stringify","year","parseInt","filter","e","years_to_add","k","newArray","String","rwlData2","prev_name","newSet","rwlArray","curr_name","startYear","yearAdj","year_in_formattedData","year_in_rwlData","width_to_test","width","current_array_index","indexOf","l","array_needing_neg_one","unshift","formatSpaceDelim","parseFile","file","Promise","resolve","reject","fr","FileReader","onload","event","i","type","target","result","ptWidths","papaObj","delimitersToGuess","errors","split_second_row","test_string","onerror","err","readAsText","parseFiles","files","parsedFiles","parsedFile","formatFileData","fileDataArray","arr","Array","fileData","tw","ew","lw","col","yearArray","widthArray","row","obj","Object","name","x","y"],"mappings":"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","sourcesContent":["// parse local core points in LTreering\r\n// window.postMessage({ x: [], y: [], name: \"\" })\r\n\r\n// use distance & annotation data in JSON\r\n\r\nimport Papa from 'papaparse'\r\n\r\nfunction toMM (num) {\r\n  if (num.length == 4) {\r\n    // 1234 => 1.234\r\n    return num.slice(0, 1) + '.' + num.slice(1);\r\n  } else if (num.length == 3) {\r\n    // 123 => 0.123\r\n    return '0.' + num\r\n  } else if (num.length == 2) {\r\n    // 12 => 0.012\r\n    return '0.0' + num\r\n  } else {\r\n    // 1 => 0.001\r\n    return '0.00' + num\r\n  }\r\n}\r\n\r\nfunction formatRWL (data) {\r\n  var formattedData = [];\r\n  // 1) rwl remove header\r\n  var headerLength = 0\r\n  for (let array of data) {\r\n    let test_character = array[0].charAt(9)\r\n    if (isNaN(parseFloat(test_character))) {\r\n      headerLength++\r\n    } else {\r\n      break\r\n    }\r\n  }\r\n  data.splice(0, headerLength);\r\n  // 2) split rwl data into array\r\n  // current format: [Core name, year, length, length, length, ...], ...\r\n  var rwlSplitData = []\r\n  for (let array of data) {\r\n    var splitData = array[0].split(/[\\s]+/)\r\n    rwlSplitData.push(splitData)\r\n  }\r\n  // 3) build new header\r\n  // header format: [Year, Core 1 name, Core 2 name, ...]\r\n  var newHeader = ['Year'];\r\n  var currentName = '';\r\n  for (let array of rwlSplitData) {\r\n    let rowName = array[0];\r\n    if (rowName != currentName && rowName) {\r\n      newHeader.push(rowName);\r\n      currentName = rowName;\r\n    };\r\n  };\r\n  // 4) create arrays for all years\r\n  // format: [Year, ...], [1900, ...], [1901, ...]\r\n  var earliestYear = Number.MAX_SAFE_INTEGER;\r\n  var latestDecade =  -1 * Number.MAX_SAFE_INTEGER;\r\n  var latestYear = 0;\r\n  var rwlData1 = JSON.parse(JSON.stringify(rwlSplitData)); // create new array for data so old one is not modified\r\n  for (let array of rwlData1) {\r\n    var year = parseInt(array[1]);\r\n    if (year < earliestYear) { // find first year\r\n      earliestYear = year;\r\n    } else if (year > latestDecade) { // find last year\r\n      array.splice(0, 2) // remove row name & decade/year\r\n      array = array.filter((e) => { // remove sentinel, sentinel = indicator of specimens final width\r\n        if ((isNaN(parseFloat(e)) == false) &&\r\n        (parseFloat(e) > 0) &&\r\n        (e != '999')) {\r\n          return e\r\n        }\r\n      });\r\n      var years_to_add = array.length - 1; // add number of widths to found year, subtract 1 b/c RWL starts at 0 not 1\r\n      latestDecade = year;\r\n      latestYear = year + years_to_add;\r\n    }\r\n  }\r\n  for (var k = earliestYear; k <= latestYear; k++) {\r\n    var newArray = [];\r\n    newArray.push(String(k));\r\n    formattedData.push(newArray);\r\n  }\r\n  // 5) format & add widths to data\r\n  // format: [Year, Core 1 name, Core 2 name, ...], [1900, width 1, width 2, ...], [1901, width 1, width 2, ...]\r\n  var rwlData2 = JSON.parse(JSON.stringify(rwlSplitData)); // create new array for data so old one is not modified\r\n  var prev_name = '';\r\n  var newSet = true;\r\n  for (let rwlArray of rwlData2) {\r\n    var curr_name = rwlArray[0];\r\n    if (curr_name == prev_name) {\r\n      newSet = false;\r\n    } else {\r\n      newSet = true;\r\n      prev_name = curr_name;\r\n    }\r\n\r\n    var startYear = parseFloat(rwlArray[1]);\r\n    var yearAdj = 0; // index of width in RWL as well as that widths year\r\n    rwlArray.splice(0, 2); // remove row name & decade/year\r\n    for (let array of formattedData) {\r\n      var year_in_formattedData = array[0];\r\n      if (yearAdj > rwlArray.length - 1) {\r\n        yearAdj = 0;\r\n        break\r\n      }\r\n      var year_in_rwlData = String(startYear + yearAdj);\r\n      if (year_in_rwlData == year_in_formattedData) {\r\n        var width_to_test = rwlArray[yearAdj];\r\n        if ((isNaN(parseFloat(width_to_test)) == false) &&\r\n            (parseFloat(width_to_test) > 0) &&\r\n            (width_to_test != '999')) {\r\n          // check that width is not a sentinel (indicator of end of core)\r\n          var width = toMM(rwlArray[yearAdj])\r\n          array.push(width);\r\n          yearAdj++\r\n        } else { // if sentinel, add -1 (missing data indicator) to rest of formattedData\r\n          var current_array_index = formattedData.indexOf(array);\r\n          for (var l = current_array_index; l < formattedData.length; l++) {\r\n            var array_needing_neg_one = formattedData[l];\r\n            array_needing_neg_one.push('-1');\r\n          }\r\n          break\r\n        }\r\n      } else if (newSet == true) {\r\n        array.push('-1')\r\n      }\r\n    }\r\n  }\r\n  // 6) add header\r\n  formattedData.unshift(newHeader);\r\n\r\n  return formattedData\r\n}\r\n\r\nfunction formatSpaceDelim (data) {\r\n  var formattedData = []\r\n  for (let array of data) {\r\n    let splitData = array[0].split(/[\\s]+/)\r\n    formattedData.push(splitData)\r\n  }\r\n\r\n  return formattedData\r\n}\r\n\r\nfunction parseFile (file) {\r\n  return new Promise((resolve, reject) => {\r\n    let fr = new FileReader()\r\n    fr.onload = function(event, i) {\r\n      if (file.type == 'application/json') {\r\n        resolve(JSON.parse(event.target.result).ptWidths)\r\n      } else {\r\n        let papaObj = Papa.parse(event.target.result, {delimitersToGuess: [',', '\\t']})\r\n        if (papaObj.errors.length) { // rwl or space demilited files\r\n          // space delimited has a years in far left column, RWL had specimen names, way to differentiate\r\n          var split_second_row = papaObj.data[1][0].split(/[\\s]+/);\r\n          var test_string = split_second_row[0];\r\n          if (isNaN(parseFloat(test_string))) {\r\n            resolve(formatRWL(papaObj.data))\r\n          } else {\r\n            resolve(formatSpaceDelim(papaObj.data))\r\n          }\r\n        } else { // CSV, TSV files\r\n          resolve(papaObj.data)\r\n        }\r\n      }\r\n    }\r\n    fr.onerror = err => reject(err);\r\n\r\n    fr.readAsText(file)\r\n  })\r\n}\r\n\r\nasync function parseFiles(files) {\r\n  var parsedFiles = [];\r\n\r\n  for (let file of files) {\r\n    let parsedFile = await parseFile(file)\r\n    parsedFiles.push(parsedFile)\r\n  }\r\n\r\n  return parsedFiles\r\n}\r\n\r\nconst formatFileData = async function (files) {\r\n  var fileDataArray = await parseFiles(files)\r\n\r\n  var arr = new Array()\r\n\r\n  for (let fileData of fileDataArray) {\r\n    if (fileData.tw) { // JSON already formatted\r\n      arr.push(fileData.tw)\r\n      if (fileData.ew && fileData.lw) {\r\n        arr.push(fileData.ew)\r\n        arr.push(fileData.lw)\r\n      }\r\n      continue\r\n    }\r\n\r\n    /* other file types are formatted:\r\n      [year, nameA, nameB, ...],\r\n      [year1, width1A, width1B, ...],\r\n\r\n      convert it to Plotly data object format:\r\n      obj = {\r\n        x: [...], (years)\r\n        y: [...], (widths)\r\n        name: 'nameA',\r\n        ...\r\n      }\r\n    */\r\n    for (let col = 1; col < fileData[0].length; col++) {\r\n      var yearArray = []\r\n      var widthArray = []\r\n      for (let row = 1; row < fileData.length; row++) {\r\n        let year = fileData[row][0]\r\n        let width = fileData[row][col]\r\n        if (width >= 0) {\r\n          yearArray.push(parseInt(year))\r\n          widthArray.push(parseFloat(width))\r\n        }\r\n      }\r\n      var obj = new Object()\r\n      obj.name = fileData[0][col]\r\n      obj.x = yearArray\r\n      obj.y = widthArray\r\n\r\n      arr.push(obj)\r\n    }\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\nexport default formatFileData\r\n"]}]}